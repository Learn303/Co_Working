# -*- coding: utf-8 -*-
"""Foundation of Statistic -  Model Evaluation 1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AHgUPW7Do_yVNXLNUjg7V8eKm9PVRP1g

Disclaimer : Ini merupakan hasil atau materi pembelajaran saya, selama saya belajar dari Pacmann

#Foundation of Statistic -  Model Evaluation 1
"""

from google.colab import drive
drive.mount('/content/drive')

"""**Outline**

1. Topic Review
2. Case 1 - Sales Prediction
3. Case 2 - Medical Charge Prediction

- We need to import library and function that need to run the code in this notebook to:
  - load data
  - doing simulation
  - drawing graph and other visualization
  - performing cross validation using statsmodel
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as pyplot
import seaborn as sns

from matplotlib.gridspec import GridSpec

import statsmodels.api as sm
import statsmodels.formula.api as smf

from sklearn.base import BaseEstimator, RegressorMixin
from sklearn.metrics import r2_score

from sklearn.model_selection import cross_validate, cross_val_score, KFold

def print_coef_std_err(results):
    """
    Function to combine estimated coefficients and standard error in one DataFrame
    :param results: <statsmodels RegressionResultsWrapper> OLS regression results from statsmodel
    :return df: <pandas DataFrame>  combined estimated coefficient and standard error of model estimate
    """
    coef = results.params
    std_err = results.bse

    df = pd.DataFrame(data = np.transpose([coef, std_err]),
                      index = coef.index,
                      columns=["coef","std err"])
    return df

class StatsmodelsRegressor(BaseEstimator, RegressorMixin):
    """ A universal sklearn-style wrapper for statsmodels regressors """

    def __init__(self, sm_class, sm_formula):
        self.sm_class = sm_class
        self.sm_formula = sm_formula
        self.model = None
        self.result = None

    def fit(self, data, dummy):
        self.model = self.sm_class(self.sm_formula, data)
        self.result = self.model.fit()

    def predict(self,X):
        return self.result.predict(X)

def kfold_split(data, n_fold):
    """
    Function to combine estimated coefficients and standard error in one DataFrame
    :param results: <statsmodels RegressionResultsWrapper> OLS regression results from statsmodel
    :param n_fold: <int> Number of fold in k-fold CV
    :return df: <pandas DataFrame>  combined estimated coefficient and standard error of model estimate
    """
    kfold = KFold(n_splits = n_fold,
                  shuffle = True,
                  random_state=123)
    fold_train = {}
    fold_test = {}

    for i, (train, test) in enumerate(kfold.split(data)):
        print(f"fold {i+1}, train data rows: {len(train)}, test data rows: {len(test)}")
        fold_train[i] = data.iloc[train].copy()
        fold_test[i] = data.iloc[test].copy()

    return (fold_train, fold_test)

"""
    Function to combine estimated coefficients and standard error in one DataFrame
    :param results: <statsmodels RegressionResultsWrapper> OLS regression results from statsmodel
    :return df: <pandas DataFrame>  combined estimated coefficient and standard error of model estimate
    """

#def print_coef_std_err(results):
#  coef = results.params
#  std_err = results.bse

#  df = pd.DataFrame(data=np.transpose([coef, std_err]),
#                      index=results.params.index,
#                      columns=['coef', 'std_err'])
#  return df

""" A universal sklearn-style wrapper for statsmodels regressors """

#class StatsmodelsRegressor(BaseEstimator, RegressorMixin):
#  def __init__(self, sm_class, sm_formula):
#    self.sm_class = sm_class
#    self.sm_formula = sm_formula
#    self.model = None
#    self.result = None

#  def fit(self, data, dummy):
#    self.model = self.sm_class(self.sm_formula, data=data)
#    self.result = self.model.fit()

#  def predict(self, data):
#    return self.result.predict(X)

"""
    Function to combine estimated coefficients and standard error in one DataFrame
    :param results: <statsmodels RegressionResultsWrapper> OLS regression results from statsmodel
    :param n_fold: <int> Number of fold in k-fold CV
    :return df: <pandas DataFrame>  combined estimated coefficient and standard error of model estimate
    """
#def KFold_split(data, n_fold):
#  Kfold = KFold(n_splits=n_fold,
#                shuffle=True,
#                random_state=123)

#  fold_train = {}
#  fold_test = {}

#  for i, (train, test) in enumerate(kfold.split(data)):
#        print(f"fold {i+1}, train data rows : {len(train)}, test data rows : {len(test)}")
#       fold_train[i] = data.iloc[train].copy()
#        fold_test[i] = data.iloc[test].copy()

#  return (fold_train, fold_test)



"""## **Topic Review**

### Residual Standard Deviation and Explained Variance
- Residual standard deviation values are depend on the scale of outcome variable, so it's hard to tell that whether the value is good or not under the fitted model.
- R-squared is a metric to tell how much variance of outcome variable are explained in model. since the value is proportion, the closer the R-squared to 1, the better the model is.
$$R^2 = \frac{\sum_{i=1}^n(y_i-\hat{y}_i)^2}{\sum_{i=1}^n(y_i-\bar{y})^2}$$


  - Thereâ€™s no hard-and-fast rule for how large R-square as it varies depending on the application. For instance, in macroeconomics, the regression lines commonly have R-square greater than 90%, while in medical research and marketing surveys, an R-square of 30% or less may signify a significant breakthrough.$^{[1]}$
  - R-squared can be used as metric evaluation of regression model

### Model Evaluation

- The goal of model evaluation is to make sure our fitted regression model are perform well in both observed data and unseen data
  - Cross Validation is one of technique that help us generalized the evaluation of model, by hold out some of our observation data as the proxy for future data.
  - Most well-known method to separate the data is K-Fold Cross Validation.
  - K-Fold Cross Validation devide our data to k partition, and fitting the model k times and computed each performance
  - The score in cross validation usually computed as the average of performance across k models

- Initially, a dataset with n observations is randomly divided into five groups with no overlap.
  - Each of the five subsets takes turns acting as the training set (it may called as validation set too in other reference) (colored in beige), while the remaining subsets act as the training set (colored in blue).
  - The resulting performance is calculated for each of the five models, and the test error is estimated by averaging these performances, for example using R-squared.

$$\text{CV}_{(k)} = \frac{1}{k}\sum_{i=1}^k R^2_i$$

## **Case 1 - Sales Prediction**

Sales team wants to optimize their advertising budget. They have collected previous data about avertising budget in each TV, Radio and Newspaper as marketing channels and each overall sales revenue in Millions Dollar.

***They want to know***

1. Which channels that contribute positively to overall sales.
2. If they have total advertising budget`170$`, and they have sales target to achieve 25 millions dollar revenue. How to distribute the total budget to each channels?

Help team sales to answer the questions and give recommendation to sales team utilizing regression model

### Load Data
"""

df = pd.read_csv('/content/drive/MyDrive/Data Science /Dataset/Advertising.csv')
df.head()

df.isna().sum()

df.info()

df.describe().T





"""#### Define the model to fit for the data"""

# Create a class model
ols_all_media = StatsmodelsRegressor(smf.ols, "Sales ~ TV + Radio + Newspaper")

"""#### Evaluate the model using K-fold cross validation"""

# Create k-fold splitter object
kfold = KFold(n_splits =5,shuffle = True, random_state =123)

#### Calculate performance for each model
scores_ols_all_media = cross_val_score(estimator = ols_all_media,
                                       X = df,
                                       y = df["Sales"],
                                       scoring="r2",
                                       cv=kfold)

scores_ols_all_media = pd.DataFrame(data = scores_ols_all_media,
                                    columns = ["test_rsquared"])

scores_ols_all_media["folds"] = [f"Folds {i+1}" for i in range(5)]
scores_ols_all_media

scores_ols_all_media["test_rsquared"].mean()

"""The model use all media have good fit, it can explain 88.57% variance of sales. Let's build the model using whole data to infer the estimated coefficient from the model, and gain the insight from business prespective

### Fit Linear Regression - Using All Media Channel

We can obtain the relationship each channel to sales by fitting linear regression model
"""

# Create OLS model object
model = smf.ols("Sales ~ TV + Radio + Newspaper",  df)

# Fit the model
results = model.fit()
results.summary()

# Extract the results (Coefficient and Standard Error) to DataFrame
results_advert = print_coef_std_err(results)
results_advert

"""### Insight 1

- The estimated coefficient of Radio and TV channel is positive, it means the higher advertising cost in Radio or TV channel, also expect higher sales revenue.
- The coefficient in Newspaper is negative, although the coefficient is small, it means the higher advertising cost in Newspaper, expect lower sales revenue.

> 1. Which channels that contribute positively to overall sales.

Regarding the first question, we recommend to use Radio and TV channel to deliver the advertising as they have positive contribution to sales

> 2. If they have budget advertising 170 Millions dollar, and they have sales target to achieve 25. How to distribute 170 to each marketing channels?

Regarding the second question, we can use the estimated coefficient as the weight of channels. To know budget distribution in each channel, we need to do calculation based on the the regression equation and the budget constrained.

The model shows the relationship in this equation between sales revenue, radio and tv
 <div style="padding-left: 30px;">
        <br>
  $\text{Sales} = 2.9 + 0.19\text{Radio} + 0.05\text{TV} + 0.19\text{Radio} - 0.001\text{Newspaper} $
        <br>
  </div>

or we can write
  <div style="padding-left: 30px;">
        <br>
  $\text{Target Sales} = \text{intercept} + (\text{w_radio}\times\text{Radio Budget}) + (\text{w_tv}\times\text{TV Budget}) + (\text{w_newspaper}\times\text{Newspaper Budget})$
        <br>
  </div>

- We know expected target sales is 25, however we dont expect our sales to decrease by allocating budget to newspaper channel, so we set 0 budget to newspaper
- By the regression equation we can write
    <div style="padding-left: 30px;">
        <br>
            $2.9 + (0.19\times\text{Radio Budget}) + (0.05\times\text{TV Budget}) = \text{25} \text{ ........ (1)}$
        <br>
    </div>
    
    
- We have maximum total budget 170 Millions dollar, we can write,
<div style="padding-left: 190px;">
        <br>
$\text{Radio Budget} + \text{TV Budget} = \text{Total Budget}$,
        <br>
</div>
 <br>
 or
 <br>
    <div style="padding-left: 190px;">
        <br>
            $\text{Radio Budget} + \text{TV Budget} = 170 \text{ ........ (2)}$
        <br>
    </div>

- We need to calculate the value of each variables Radio and TV budget constrained by regression equation and possible total budget.
- We need to do simple calculation by subtitute equation (2) to equation (1)

$$2.9 + (0.19\times\text{Radio Budget}) + (0.05\times(170 - \text{Radio Budget})) = \text{25}$$

$$2.9 + (0.19\times\text{Radio Budget}) + (0.05\times170) - (0.05\times\text{Radio Budget})) = \text{25}$$

$$\text{Radio Budget} =\frac{25 - 2.9 - (0.05\times170)}{0.19-0.05}$$

For simplicity we can calculate the radio budget using this equation

$$\text{Radio Budget} = \frac{\text{Target Sales} - \text{Intercept} - (\text{w_tv}\times\text{Total Budget})}{\text{w_radio}-\text{w_tv}}$$
"""

intercept = results_advert["coef"]["Intercept"]
w_radio = results_advert["coef"]["Radio"]
w_tv = results_advert["coef"]["TV"]

total_buget = 170
target_sales = 25

radio_budget = (target_sales - intercept - (w_tv*total_buget))/(w_radio-w_tv)
radio_budget

tv_budget = total_buget - radio_budget
tv_budget

"""### Insight 2

> 1. If they have budget advertising 170 Millions dollar, and they have sales target to achieve 25. How to distribute 170 to each marketing channels?

Regarding the second question, if Sales Team expect 25 millions dollar sales revenue with total budget 170 millions dollar, Sales Team can use `69.46 millions dollar for tv` and `100.54 millions dollar for radio`
"""